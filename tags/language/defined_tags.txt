fails:The defined? keyword when called with a method name without a receiver returns 'method' if the method is defined
fails:The defined? keyword when called with a method name without a receiver returns nil if the method is not defined
fails:The defined? keyword when called with a method name without a receiver returns 'method' if the method is defined and private
fails:The defined? keyword when called with a method name without a receiver returns 'method' if the predicate method is defined and private
fails:The defined? keyword when called with a method name having a module as receiver returns 'method' if the method is defined
fails:The defined? keyword when called with a method name having a module as receiver returns nil if the method is private
fails:The defined? keyword when called with a method name having a module as receiver returns nil if the method is protected
fails:The defined? keyword when called with a method name having a module as receiver returns nil if the method is not defined
fails:The defined? keyword when called with a method name having a local variable as receiver returns 'method' if the method is defined
fails:The defined? keyword when called with a method name having a local variable as receiver returns nil if the method is not defined
fails:The defined? keyword when called with a method name having a local variable as receiver returns nil if the variable does not exist
fails:The defined? keyword when called with a method name having a local variable as receiver calls #respond_to_missing?
fails:The defined? keyword when called with a method name having an instance variable as receiver returns 'method' if the method is defined
fails:The defined? keyword when called with a method name having an instance variable as receiver returns nil if the method is not defined
fails:The defined? keyword when called with a method name having a global variable as receiver returns 'method' if the method is defined
fails:The defined? keyword when called with a method name having a global variable as receiver returns nil if the method is not defined
fails:The defined? keyword when called with a method name having a global variable as receiver returns nil if the variable does not exist
fails:The defined? keyword when called with a method name having a method call as a receiver returns nil if evaluating the receiver raises an exception
fails:The defined? keyword when called with a method name having a method call as a receiver returns nil if the method is not defined on the object the receiver returns
fails:The defined? keyword when called with a method name having a method call as a receiver returns 'method' if the method is defined on the object the receiver returns
fails:The defined? keyword for an expression returns nil for an expression with == and an undefined method
fails:The defined? keyword for an expression returns nil for an expression with != and an undefined method
fails:The defined? keyword for an expression returns nil for an expression with !~ and an undefined method
fails:The defined? keyword for an expression returns 'method' for an expression with '=='
fails:The defined? keyword for an expression returns 'method' for an expression with '!='
fails:The defined? keyword for an expression returns 'method' for an expression with '!~'
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with '!' and an undefined method
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with '!' and an unset class variable
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with 'not' and an undefined method
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with 'not' and an unset class variable
fails:The defined? keyword for an expression with logical connectives does not propagate an exception raised by a method in a 'not' expression
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with '!' and an unset global variable
fails:The defined? keyword for an expression with logical connectives returns 'method' for a 'not' expression with a method
fails:The defined? keyword for an expression with logical connectives calls a method in a 'not' expression and returns 'method'
fails:The defined? keyword for an expression with logical connectives returns nil for an expression with 'not' and an unset global variable
fails:The defined? keyword for variables returns nil for an instance variable that has not been read
fails:The defined? keyword for variables returns nil for an instance variable that has been read but not assigned to
fails:The defined? keyword for variables returns 'instance-variable' for an instance variable that has been assigned
fails:The defined? keyword for variables returns 'instance-variable' for an instance variable that has been assigned to nil
fails:The defined? keyword for variables returns nil for a global variable that has not been read
fails:The defined? keyword for variables returns nil for a global variable that has been read but not assigned to
fails:The defined? keyword for variables returns 'global-variable' for a global variable that has been assigned nil
fails:The defined? keyword for variables returns 'global-variable' for $!
fails:The defined? keyword for variables returns 'global-variable for $~
fails:The defined? keyword for variables returns 'global-variable' for a global variable that has been assigned
fails:The defined? keyword for variables returns nil for a class variable that has not been read
fails:The defined? keyword for variables returns 'class variable' when called with the name of a class variable
fails:The defined? keyword for variables when a String does not match a Regexp returns 'global-variable' for $~
fails:The defined? keyword for variables when a String does not match a Regexp returns nil for $&
fails:The defined? keyword for variables when a String does not match a Regexp returns nil for $`
fails:The defined? keyword for variables when a String does not match a Regexp returns nil for $'
fails:The defined? keyword for variables when a String does not match a Regexp returns nil for $+
fails:The defined? keyword for variables when a String does not match a Regexp returns nil for any last match global
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $~
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $&
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $`
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $'
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $+
fails:The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for the capture references
fails:The defined? keyword for variables when a String matches a Regexp returns nil for non-captures
fails:The defined? keyword for variables when a Regexp does not match a String returns 'global-variable' for $~
fails:The defined? keyword for variables when a Regexp does not match a String returns nil for $&
fails:The defined? keyword for variables when a Regexp does not match a String returns nil for $`
fails:The defined? keyword for variables when a Regexp does not match a String returns nil for $'
fails:The defined? keyword for variables when a Regexp does not match a String returns nil for $+
fails:The defined? keyword for variables when a Regexp does not match a String returns nil for any last match global
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $~
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $&
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $`
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $'
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $+
fails:The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for the capture references
fails:The defined? keyword for variables when a Regexp matches a String returns nil for non-captures
fails:The defined? keyword for a simple constant returns 'constant' when the constant is defined
fails:The defined? keyword for a simple constant returns nil when the constant is not defined
fails:The defined? keyword for a simple constant does not call Object.const_missing if the constant is not defined
fails:The defined? keyword for a simple constant returns 'constant' for an included module
fails:The defined? keyword for a simple constant returns 'constant' for a constant defined in an included module
fails:The defined? keyword for a top-level constant returns 'constant' when passed the name of a top-level constant
fails:The defined? keyword for a top-level constant returns nil if the constant is not defined
fails:The defined? keyword for a top-level constant does not call Object.const_missing if the constant is not defined
fails:The defined? keyword for a self-send method call scoped constant returns nil if the constant is not defined in the scope of the method's value
fails:The defined? keyword for a self-send method call scoped constant returns 'constant' if the constant is defined in the scope of the method's value
fails:The defined? keyword for a self-send method call scoped constant returns nil if the last constant is not defined in the scope chain
fails:The defined? keyword for a self-send method call scoped constant returns nil if the middle constant is not defined in the scope chain
fails:The defined? keyword for a self-send method call scoped constant returns 'constant' if all the constants in the scope chain are defined
fails:The defined? keyword for a receiver method call scoped constant returns nil if the constant is not defined in the scope of the method's value
fails:The defined? keyword for a receiver method call scoped constant returns 'constant' if the constant is defined in the scope of the method's value
fails:The defined? keyword for a receiver method call scoped constant returns nil if the last constant is not defined in the scope chain
fails:The defined? keyword for a receiver method call scoped constant returns nil if the middle constant is not defined in the scope chain
fails:The defined? keyword for a receiver method call scoped constant returns 'constant' if all the constants in the scope chain are defined
fails:The defined? keyword for a module method call scoped constant returns nil if the constant is not defined in the scope of the method's value
fails:The defined? keyword for a module method call scoped constant returns 'constant' if the constant scoped by the method's value is defined
fails:The defined? keyword for a module method call scoped constant returns nil if the last constant in the scope chain is not defined
fails:The defined? keyword for a module method call scoped constant returns nil if the middle constant in the scope chain is not defined
fails:The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the scope chain are defined
fails:The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the receiver are defined
fails:The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the receiver and scope chain are defined
fails:The defined? keyword for a variable scoped constant returns nil if the class scoped constant is not defined
fails:The defined? keyword for a variable scoped constant returns 'constant' if the constant is defined in the scope of the class variable
fails:The defined? keyword for a self:: scoped constant returns 'constant' for a constant explicitly scoped to self:: in subclass's metaclass
fails:The defined? keyword for yield returns nil if no block is passed to a method not taking a block parameter
fails:The defined? keyword for yield returns nil if no block is passed to a method taking a block parameter
fails:The defined? keyword for yield returns 'yield' if a block is passed to a method not taking a block parameter
fails:The defined? keyword for yield returns 'yield' if a block is passed to a method taking a block parameter
fails:The defined? keyword for super returns nil when a superclass undef's the method
fails:The defined? keyword for super for a method taking no arguments returns nil when no superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns nil from a block when no superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns nil from a #define_method when no superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns nil from a block in a #define_method when no superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns 'super' when a superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns 'super' from a block when a superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns 'super' from a #define_method when a superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns 'super' from a block in a #define_method when a superclass method exists
fails:The defined? keyword for super for a method taking no arguments returns 'super' when the method exists in a supermodule
fails:The defined? keyword for super for a method taking arguments returns nil when no superclass method exists
fails:The defined? keyword for super for a method taking arguments returns nil from a block when no superclass method exists
fails:The defined? keyword for super for a method taking arguments returns nil from a #define_method when no superclass method exists
fails:The defined? keyword for super for a method taking arguments returns nil from a block in a #define_method when no superclass method exists
fails:The defined? keyword for super for a method taking arguments returns 'super' when a superclass method exists
fails:The defined? keyword for super for a method taking arguments returns 'super' from a block when a superclass method exists
fails:The defined? keyword for super for a method taking arguments returns 'super' from a #define_method when a superclass method exists
fails:The defined? keyword for super for a method taking arguments returns 'super' from a block in a #define_method when a superclass method exists
fails:The defined? keyword for super within an included module's method returns 'super' when a superclass method exists in the including hierarchy
fails:The defined? keyword for instance variables returns 'instance-variable' if assigned
fails:The defined? keyword for instance variables returns nil if not assigned
